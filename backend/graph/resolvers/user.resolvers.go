package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"github.com/ariefsn/ngobrol/constants"
	"github.com/ariefsn/ngobrol/entities"
	"github.com/ariefsn/ngobrol/validator"
)

// UserLogin is the resolver for the userLogin field.
func (r *mutationResolver) UserLogin(ctx context.Context, input entities.UserLoginPayload) (*entities.UserLoginResponse, error) {
	err := validator.ValidateStruct(input)

	if err != nil {
		return nil, err
	}

	res, err := r.UserService.Login(ctx, &input)
	if res.Profile != nil {
		room, _ := r.RoomService.GetByCode(ctx, input.RoomCode)
		if room == nil {
			r.RoomService.Create(ctx, &entities.RoomCreatePayload{
				RoomCode: input.RoomCode,
				UserId:   input.Email,
			})
		} else {
			users := []string{}
			for _, v := range room.Users {
				users = append(users, v.Email)
			}
			users = append(users, input.Email)
			r.RoomService.Update(ctx, room.Id, &entities.RoomData{
				Id:    room.Id,
				Code:  room.Code,
				Image: room.Image,
				Users: users,
				Audit: room.Audit,
			})
		}
	}

	return res, err
}

// UserLogout is the resolver for the userLogout field.
func (r *mutationResolver) UserLogout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: UserLogout - userLogout"))
}

// UserUpdateProfile is the resolver for the userUpdateProfile field.
func (r *mutationResolver) UserUpdateProfile(ctx context.Context, input entities.UserUpdatePayload) (*entities.UserData, error) {
	err := validator.ValidateStruct(input)
	if err != nil {
		return nil, err
	}

	return r.UserService.Update(ctx, ctx.Value(constants.AuthEmailKey).(string), &input)
}

// UserProfile is the resolver for the userProfile field.
func (r *queryResolver) UserProfile(ctx context.Context) (*entities.UserData, error) {
	return r.UserService.GetByEmail(ctx, ctx.Value(constants.AuthEmailKey).(string))
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context, input entities.UserSearchPayload) (*entities.UserSearchResponse, error) {
	panic(fmt.Errorf("not implemented: GetUsers - getUsers"))
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *subscriptionResolver) SubRoomUsers(ctx context.Context, roomCode string) (<-chan []*entities.UserData, error) {
	panic(fmt.Errorf("not implemented: SubRoomUsers - subRoomUsers"))
}

type userDataResolver struct{ *Resolver }
